@implements IDisposable

<div class="modal-overlay" @onclick="Close"></div>
<div class="modal" @onclick:stopPropagation>
    <h2>Produkcja wypieków</h2>

    <div class="production-layout">
        <div class="production-left">
            @foreach (var product in GameState.Bakery.Products)
            {
                <div class="product-button" @onclick="() => TryStartProduction(product)">
                    <img src="images/products/@product.IconFile" alt="@product.Name" class="product-icon" />
                    <span class="product-amount">+@product.ProducedAmount</span>
                    <div class="ingredient-list">
                        @foreach (var req in product.RequiredIngredients)
                        {
                            var owned = GameState.Bakery.Ingredients.FirstOrDefault(i => i.Name == req.Key)?.Quantity ?? 0;
                            <div>@req.Key: @owned / @req.Value</div>
                        }
                    </div>
                </div>
            }
        </div>

        <div class="production-right">
            @if (GameState.ActiveProductions.Any())
            {
                <ul class="production-queue">
                    @foreach (var task in GameState.ActiveProductions)
                    {
                        var now = DateTime.Now;
                        var product = GameState.Bakery.Products.FirstOrDefault(p => p.Name == task.ProductName);
                        var timePerItem = TimeSpan.FromSeconds(product?.ProductionTimeSeconds ?? 15);

                        double currentProgress = task.CurrentProgress;

                        if (task.LastStarted is DateTime started)
                        {
                            var elapsed = now - started;
                            currentProgress = Math.Min(1.0, elapsed.TotalSeconds / timePerItem.TotalSeconds);
                        }

                        var completedItems = task.TotalQuantity - task.QuantityRemaining;
                        var percent = (int)(((completedItems + currentProgress) / task.TotalQuantity) * 100);
                        var secondsLeft = (int)((task.QuantityRemaining - 1 + (1.0 - currentProgress)) * timePerItem.TotalSeconds);

                        var taskClass = task.IsRunning ? "production-running" : "production-waiting";
                        var fillWidth = $"{percent}%";

                        <li class="@taskClass">
                            <div class="production-row">
                                <img src="images/products/@product?.IconFile" alt="@task.ProductName" class="production-icon" />

                                <div class="progress-bar">
                                    <div class="progress-fill" style="width:@fillWidth"></div>
                                    @if (task.IsRunning)
                                    {
                                        <span class="progress-text">@secondsLeft sek</span>
                                    }
                                </div>
                                <div class="production-controls">
                                    @if (task.IsRunning)
                                    {
                                        <button @onclick="() => CancelTask(task)" title="Anuluj">❌</button>
                                    }
                                    else
                                    {
                                        <button @onclick="() => MoveUp(task)" title="Przesuń wyżej">🔼</button>
                                        <button @onclick="() => MoveDown(task)" title="Przesuń niżej">🔽</button>
                                        <button @onclick="() => CancelTask(task)" title="Anuluj">❌</button>
                                    }
                                </div>
                            </div>

                        </li>
                    }
                </ul>
            }
            else
            {
                <p>Brak aktywnych produkcji.</p>
            }
        </div>
    </div>
    <ErrorPopup Message="@popup.Message" Visible="@popup.Visible" FadeOut="@popup.FadeOut" />
</div>

@code {
    private ErrorPopupController popup = new();

    protected override void OnInitialized() => GameState.OnChange += StateHasChanged;
    public void Dispose() => GameState.OnChange -= StateHasChanged;

    private void Close() => ModalService.CloseModal();

    private async void TryStartProduction(Product product)
    {
        var enough = product.RequiredIngredients.All(req =>
        {
            var ing = GameState.Bakery.Ingredients.FirstOrDefault(i => i.Name == req.Key);
            return ing != null && ing.Quantity >= req.Value;
        });

        if (!enough)
        {
            await popup.ShowError("Brakuje składników!");
            StateHasChanged();
            return;
        }

        if (!GameState.Bakery.Tiles.Any(t => t.Building == BuildingType.Oven))
        {
            await popup.ShowError("Zbuduj piec, aby rozpocząć produkcję.");
            StateHasChanged();
            return;
        }

        if (!GameState.Bakery.Tiles.Any(t => t.Building == BuildingType.Website))
        {
            await popup.ShowError("Zbuduj witrynę, aby przechowywać wypieki.");
            StateHasChanged();
            return;
        }

        var availableSpace = GameState.Bakery.MaxProductCapacity - GameState.Bakery.CurrentProductQuantity;
        if (availableSpace < product.ProducedAmount)
        {
            await popup.ShowError("Brak miejsca w witrynie na kolejne wypieki!");
            StateHasChanged();
            return;
        }

        GameState.Production.StartTimedProduction(product.Name, 1);
        await GameState.SaveGameAsync();
    }

    private void MoveUp(ProductionTask task)
    {
        var list = GameState.Bakery.ActiveProductions;
        int index = list.IndexOf(task);
        if (index > 0)
        {
            list.RemoveAt(index);
            list.Insert(index - 1, task);
            StateHasChanged();
        }
    }

    private void MoveDown(ProductionTask task)
    {
        var list = GameState.Bakery.ActiveProductions;
        int index = list.IndexOf(task);
        if (index < list.Count - 1 && index >= 0)
        {
            list.RemoveAt(index);
            list.Insert(index + 1, task);
            StateHasChanged();
        }
    }

    private void CancelTask(ProductionTask task)
    {
        var bakery = GameState.Bakery;
        var product = bakery.Products.FirstOrDefault(p => p.Name == task.ProductName);
        if (product != null && !task.IsRunning)
        {
            foreach (var req in product.RequiredIngredients)
            {
                var ingredient = bakery.Ingredients.FirstOrDefault(i => i.Name == req.Key);
                if (ingredient != null)
                {
                    ingredient.Quantity += req.Value * task.QuantityRemaining;
                }
            }
        }

        bakery.ActiveProductions.Remove(task);
        StateHasChanged();
    }
}