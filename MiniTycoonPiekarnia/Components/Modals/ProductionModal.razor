@implements IDisposable

<div class="modal-overlay" @onclick="Close"></div>
<div class="modal" @onclick:stopPropagation>
    <h2>Produkcja wypieków</h2>

    <div class="product-selection">
        @foreach (var product in GameState.Bakery.Products)
        {
            <div class="product-card" @onclick="() => TryStartProduction(product)">
                <img src="images/products/@product.IconFile" alt="@product.Name" title="@product.Name" class="product-icon" />
                <div class="product-ingredients">
                    @foreach (var req in product.RequiredIngredients)
                    {
                        var owned = GameState.Bakery.Ingredients.FirstOrDefault(i => i.Name == req.Key)?.Quantity ?? 0;
                        <div>@req.Key: @owned / @req.Value</div>
                    }
                </div>
            </div>
        }
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p style="color:red">@errorMessage</p>
    }

    <h4>Aktualna kolejka produkcji</h4>
    @if (GameState.ActiveProductions.Any())
    {
        <ul class="production-queue">
            @foreach (var task in GameState.ActiveProductions)
            {
                var now = DateTime.Now;
                var timePerItem = TimeSpan.FromSeconds(15);

                double currentProgress = task.CurrentProgress;

                if (task.LastStarted is DateTime started)
                {
                    var elapsed = now - started;
                    currentProgress = Math.Min(1.0, elapsed.TotalSeconds / timePerItem.TotalSeconds);
                }

                var completedItems = task.TotalQuantity - task.QuantityRemaining;
                var progressTotal = (completedItems + currentProgress) / task.TotalQuantity;
                var percent = (int)(progressTotal * 100);
                var secondsLeft = (int)((task.QuantityRemaining - 1 + (1.0 - currentProgress)) * timePerItem.TotalSeconds);

                var taskClass = task.IsRunning ? "production-running" : "production-waiting";

                <li class="@taskClass">
                    <strong>@task.ProductName</strong>: @completedItems / @task.TotalQuantity
                    <div class="progress-bar">
                        <div class="progress-fill" style="width:@percent%"></div>
                    </div>
                    <div class="progress-time">@secondsLeft sek</div>
                </li>
            }
        </ul>

    }
    else
    {
        <p>Brak aktywnych produkcji.</p>
    }

</div>

@code {
    private string? errorMessage;

    protected override void OnInitialized() => GameState.OnChange += StateHasChanged;
    public void Dispose() => GameState.OnChange -= StateHasChanged;

    private void Close() => ModalService.CloseModal();

    private async void TryStartProduction(Product product)
    {
        errorMessage = null;

        var enough = product.RequiredIngredients.All(req =>
        {
            var ing = GameState.Bakery.Ingredients.FirstOrDefault(i => i.Name == req.Key);
            return ing != null && ing.Quantity >= req.Value;
        });

        if (!enough)
        {
            errorMessage = "Brakuje składników!";
            StateHasChanged();
            return;
        }

        GameState.StartTimedProduction(product.Name, 1);
        await GameState.SaveGameAsync();
    }
}
