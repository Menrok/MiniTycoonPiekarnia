@implements IDisposable

<div class="modal-overlay" @onclick="Close"></div>

<div class="modal">
    <div class="expand-options">
        @if (ReachedMaxSize)
        {
            <div class="expand-card disabled">
                <h3>Rozbuduj piekarnię</h3>
                Osiągnięto maksymalny rozmiar piekarni.
                <div class="expand-cost">@MoneyLabelHelper.Format(CurrentCost)</div>
            </div>
        }
        else if (!CanAfford)
        {
            <div class="expand-card disabled">
                <h3>Rozbuduj piekarnię</h3>
                Brak wystarczających środków.
                <div class="expand-cost">@MoneyLabelHelper.Format(CurrentCost)</div>
            </div>
        }
        else
        {
            <div class="expand-card" @onclick="ExpandBakery">
                <h3>Rozbuduj piekarnię</h3>
                <div class="expand-cost">@MoneyLabelHelper.Format(CurrentCost)</div>
            </div>
        }
    </div>
</div>

@code {
    private int CurrentWidth => GameState.Bakery.BakeryWidthPx;
    private int CurrentHeight => GameState.Bakery.BakeryHeightPx;
    private int MaxSize => 2000;

    private int ExpansionLevel => ((CurrentWidth + CurrentHeight) - 600) / 200;
    private int CurrentCost => (int)(500 * Math.Pow(2, ExpansionLevel));
    private bool CanAfford => GameState.Economy.CanAfford(CurrentCost);

    private bool ReachedMaxSize => CurrentWidth >= MaxSize || CurrentHeight >= MaxSize;

    private bool CanExpandBakery => !ReachedMaxSize && CanAfford;

    private void ExpandBakery()
    {
        if (!CanExpandBakery) return;

        GameState.Building.ExpandBakeryRight(CurrentCost / 2);
        GameState.Building.ExpandBakeryDown(CurrentCost / 2);
        Close();
    }

    private void Close() => ModalService.CloseModal();

    protected override void OnInitialized() => GameState.OnChange += StateHasChanged;
    public void Dispose() => GameState.OnChange -= StateHasChanged;
}
