@implements IDisposable

<div class="modal-overlay" @onclick="Close"></div>

<div class="modal">
    <div class="expand-options">
        @if (CanExpandRight)
        {
            <div class="expand-card" @onclick="ExpandRight">
                <h3>Rozbuduj w prawo</h3>
                Nowa szerokość: @(CurrentWidth + 100) px
                <div class="expand-cost">@CurrentCost zł</div>
            </div>
        }
        else
        {
            <div class="expand-card disabled">
                <h3>Rozbuduj w prawo</h3>
                Nowa szerokość: @(CurrentWidth + 100) px
                <div class="expand-cost">@CurrentCost zł</div>
            </div>
        }

        @if (CanExpandDown)
        {
            <div class="expand-card" @onclick="ExpandDown">
                <h3>Rozbuduj w dół</h3>
                Nowa wysokość: @(CurrentHeight + 100) px
                <div class="expand-cost">@CurrentCost zł</div>
            </div>
        }
        else
        {
            <div class="expand-card disabled">
                <h3>Rozbuduj w dół</h3>
                Nowa wysokość: @(CurrentHeight + 100) px
                <div class="expand-cost">@CurrentCost zł</div>
            </div>
        }
    </div>
</div>

@code {
    private int CurrentWidth => GameState.Bakery.BakeryWidthPx;
    private int CurrentHeight => GameState.Bakery.BakeryHeightPx;
    private int MaxSize => 2000;

    private int ExpansionLevel => ((CurrentWidth + CurrentHeight) - 600) / 100;
    private int CurrentCost => (int)(500 * Math.Pow(2, ExpansionLevel));
    private bool CanAfford => GameState.Economy.CanAfford(CurrentCost);

    private bool CanExpandRight => CurrentWidth < MaxSize && CanAfford;
    private bool CanExpandDown => CurrentHeight < MaxSize && CanAfford;

    private void ExpandRight()
    {
        if (!CanExpandRight) return;
        GameState.Building.ExpandBakeryRight(CurrentCost);
        Close();
    }

    private void ExpandDown()
    {
        if (!CanExpandDown) return;
        GameState.Building.ExpandBakeryDown(CurrentCost);
        Close();
    }

    private void Close() => ModalService.CloseModal();

    protected override void OnInitialized() => GameState.OnChange += StateHasChanged;
    public void Dispose() => GameState.OnChange -= StateHasChanged;
}
