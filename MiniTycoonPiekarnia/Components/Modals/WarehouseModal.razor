@implements IDisposable

<div class="modal-overlay" @onclick="Close"></div>
<div class="modal" @onclick:stopPropagation>
    <h2>Magazyn</h2>

    <div class="storage-info">
        Składniki: @GameState.Bakery.CurrentIngredientQuantity / @GameState.Bakery.MaxIngredientCapacity
    </div>

    @if (GameState.Bakery.Ingredients.Any(p => p.Quantity > 0))
    {
        <div class="ingredient-grid">
            @foreach (var ing in GameState.Bakery.Ingredients.Where(p => p.Quantity > 0))
            {
                <div class="ingredient-cell">
                    <img src="images/ingredients/@ing.IconFile" alt="@ing.Name" class="ingredient-icon" title="@ing.Name" />
                    <span class="ingredient-quantity">@ing.Quantity</span>
                </div>
            }
        </div>
    }
    else
    {
        <p>Brak składników.</p>
    }

    <div class="storage-info">
        Wypieki: @GameState.Bakery.CurrentProductQuantity / @GameState.Bakery.MaxProductCapacity
    </div>

    @if (GameState.Bakery.Products.Any(p => p.Quantity > 0))
    {
        <div class="product-grid">
            @foreach (var prod in GameState.Bakery.Products.Where(p => p.Quantity > 0))
            {
                <div class="product-cell">
                    <img src="images/products/@prod.IconFile" alt="@prod.Name" class="product-icon" title="@prod.Name" />
                    <span class="product-quantity">@prod.Quantity</span>
                </div>
            }
        </div>
    }
    else
    {
        <p>Brak wypieków.</p>
    }
</div>

@code {
    private void Close() => ModalService.CloseModal();

    protected override void OnInitialized() => GameState.OnChange += StateHasChanged;
    public void Dispose() => GameState.OnChange -= StateHasChanged;
}
