@implements IDisposable

<div class="modal-overlay" @onclick="Close"></div>

<div class="modal" @onclick:stopPropagation>
    <h2>Buduj na polu (@Tile.X, @Tile.Y)</h2>

    <div class="building-options">
        <div class="building-card" @onclick="() => TryBuild(BuildingType.Oven)">
            <img src="images/building/piec.png" alt="Piec" />
            <div class="label">Piec</div>
            <div class="price">200 zł</div>
        </div>
        <div class="building-card" @onclick="() => TryBuild(BuildingType.Shelf)">
            <img src="images/building/polka.png" alt="Półka" />
            <div class="label">Półka</div>
            <div class="price">100 zł</div>
        </div>
    </div>
    <div class="rotation-controls">
        <button @onclick="RotateLeft">⟲ Obróć</button>
        <span>@rotation°</span>
    </div>

    @if (errorMessage != null)
    {
        <p style="color:red">@errorMessage</p>
    }
</div>

@code {
    [Parameter] public Tile Tile { get; set; } = null!;
    [Parameter] public EventCallback OnClose { get; set; }

    private string? errorMessage;
    private int rotation = 0;

    protected override void OnInitialized() => GameState.OnChange += StateHasChanged;
    public void Dispose() => GameState.OnChange -= StateHasChanged;

    private void Close() => ModalService.CloseModal();

    private async Task TryBuild(BuildingType type)
    {
        var cost = GetBuildingCost(type);
        var success = GameState.BuildBuilding(Tile.X, Tile.Y, type, cost, rotation);

        if (!success)
        {
            errorMessage = "Za mało pieniędzy lub budynek już istnieje.";
            return;
        }

        await GameState.SaveGameAsync();
        ModalService.CloseModal();
    }

    private decimal GetBuildingCost(BuildingType building) => building switch
    {
        BuildingType.Oven => 200m,
        BuildingType.Shelf => 100m,
        _ => 0m
    };

    private void RotateLeft()
    {
        rotation = (rotation + 90) % 360;
    }
}
