@implements IDisposable

<div class="modal-overlay" @onclick="Close"></div>
<div class="modal" @onclick:stopPropagation>
    <h2>Sklep ze składnikami</h2>

    <div class="storage-bar-wrapper">
        <div class="storage-bar">
            <div class="storage-fill" style="width:@percentage%">
                <span class="storage-label">
                    Magazyn: @currentQty / @maxCapacity
                </span>
            </div>
        </div>
    </div>


    <div class="shop-grid">
        @foreach (var item in ShopItems)
        {
            var currentQty = GameState.Bakery.Ingredients.FirstOrDefault(i => i.Name == item.Name)?.Quantity ?? 0;
            <div class="shop-item">
                <div class="ingredient-box" title="@item.Name">
                    <img src="images/ingredients/@item.IconFile" class="ingredient-icon" />
                    <div class="ingredient-qty">@currentQty</div>
                </div>
                <div class="buy-buttons">
                    <button @onclick="() => Buy(item, 1)">Kup 1 (@(item.Price * 1) zł)</button>
                    <button @onclick="() => Buy(item, 5)">Kup 5 (@(item.Price * 5) zł)</button>
                    <button @onclick="() => Buy(item, 10)">Kup 10 (@(item.Price * 10) zł)</button>
                </div>
            </div>
        }
    </div>

    @if (showPopupError)
    {
        <div class="error-popup @(fadeOut ? "fade-out" : "")">
            @errorMessage
        </div>
    }
</div>

@code {
    private string? errorMessage;
    private List<IngredientShop> ShopItems = IngredientList.GetInitialIngredients()
        .Select(i => new IngredientShop(i.Name, i.PurchasePrice))
        .ToList();

    private int currentQty;
    private int maxCapacity;
    private int percentage;

    private bool showPopupError = false;
    private bool fadeOut = false;

    protected override void OnInitialized()
    {
        GameState.OnChange += StateHasChanged;
        UpdateStorageStats();
    }

    public void Dispose() => GameState.OnChange -= StateHasChanged;

    private void Close() => ModalService.CloseModal();

    private async Task Buy(IngredientShop item, int quantity)
    {
        errorMessage = null;

        var total = quantity * item.Price;
        if (!GameState.CanAfford(total))
        {
            await ShowError("Za mało pieniędzy!");
            return;
        }

        if (GameState.Bakery.CurrentIngredientQuantity + quantity > GameState.Bakery.MaxIngredientCapacity)
        {
            await ShowError("Brak miejsca w magazynie!");
            return;
        }

        GameState.BuyIngredient(item.Name, item.Price, quantity);
        await GameState.SaveGameAsync();
        UpdateStorageStats();
    }

    private void UpdateStorageStats()
    {
        maxCapacity = GameState.Bakery.MaxIngredientCapacity;
        currentQty = GameState.Bakery.CurrentIngredientQuantity;
        percentage = maxCapacity > 0 ? (int)(100 * currentQty / maxCapacity) : 0;
    }

    private async Task ShowError(string message)
    {
        errorMessage = message;
        showPopupError = true;
        fadeOut = false;
        StateHasChanged();

        await Task.Delay(700);
        fadeOut = true;
        StateHasChanged();

        await Task.Delay(500);
        showPopupError = false;
        StateHasChanged();
    }
}
