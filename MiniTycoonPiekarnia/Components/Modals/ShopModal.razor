@implements IDisposable

<div class="modal-overlay" @onclick="Close"></div>
<div class="modal" @onclick:stopPropagation>
    <h2>Sklep – Kup składniki</h2>

    <div class="storage-bar-wrapper">
        <div class="storage-bar">
            <div class="storage-fill" style="width:@($"{100 * GameState.Bakery.CurrentIngredientQuantity / GameState.Bakery.MaxIngredientCapacity}%")">
                <span class="storage-label">
                    Magazyn: @GameState.Bakery.CurrentIngredientQuantity / @GameState.Bakery.MaxIngredientCapacity
                </span>
            </div>
        </div>
    </div>


    <div class="shop-grid">
        @foreach (var item in ShopItems)
        {
            var currentQty = GameState.Bakery.Ingredients.FirstOrDefault(i => i.Name == item.Name)?.Quantity ?? 0;
            <div class="shop-item">
                <div class="ingredient-box" title="@item.Name">
                    <img src="images/ingredients/@item.IconFile" class="ingredient-icon" />
                    <div class="ingredient-qty">@currentQty</div>
                </div>
                <div class="buy-buttons">
                    <button @onclick="() => Buy(item, 1)">Kup 1</button>
                    <button @onclick="() => Buy(item, 5)">Kup 5</button>
                    <button @onclick="() => Buy(item, 10)">Kup 10</button>
                </div>
            </div>
        }
    </div>

    @if (errorMessage != null)
    {
        <p style="color:red">@errorMessage</p>
    }
</div>

@code {
    private string? errorMessage;

    private List<IngredientShop> ShopItems = IngredientList.GetInitialIngredients()
        .Select(i => new IngredientShop(i.Name, i.PurchasePrice))
        .ToList();

    protected override void OnInitialized() => GameState.OnChange += StateHasChanged;
    public void Dispose() => GameState.OnChange -= StateHasChanged;

    private void Close() => ModalService.CloseModal();

    private async Task Buy(IngredientShop item, int quantity)
    {
        errorMessage = null;

        var total = quantity * item.Price;
        if (!GameState.CanAfford(total))
        {
            errorMessage = "Za mało pieniędzy!";
            return;
        }

        if (GameState.Bakery.CurrentIngredientQuantity + quantity > GameState.Bakery.MaxIngredientCapacity)
        {
            errorMessage = "Brak miejsca w magazynie!";
            return;
        }

        GameState.BuyIngredient(item.Name, item.Price, quantity);
        await GameState.SaveGameAsync();
    }
}
