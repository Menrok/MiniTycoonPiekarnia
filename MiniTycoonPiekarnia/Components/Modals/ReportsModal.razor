@implements IDisposable

<div class="modal-overlay" @onclick="Close"></div>

<div class="modal" @onclick:stopPropagation>
    <section class="report-section">
        <h3>🏅 Statystyki ogólne</h3>
        <ul class="report-list">
            <li><strong>Poziom piekarni:</strong> @GameState.Bakery.BakeryLevel</li>
            <li><strong>Doświadczenie:</strong></li>
        </ul>
        <div class="xp-bar-container">
            <div class="xp-bar-fill" style="width:@XPBarWidth"></div>
            <div class="xp-bar-text">
                @GameState.Bakery.Experience / @GameState.Bakery.ExperienceToNextLevel
            </div>
        </div>

    </section>

    <section class="report-section">
        <h3>👥 Klienci</h3>
        <ul class="report-list">
            <li><strong>Obsłużeni klienci:</strong> @GameState.Bakery.CustomersHistory.Count</li>
            <li><strong>Zadowolenie klientów:</strong> @GameState.Bakery.CustomerSatisfaction %</li>
        </ul>
    </section>

    <section class="report-section">
        <h3>🥐 Produkty</h3>
        <ul class="report-list">
            <li><strong>Łącznie sprzedane wypieki:</strong> @TotalProductsSold</li>
        </ul>
    </section>
</div>

@code {
    private string XPBarWidth => $"{XPProgress}%";

    protected override void OnInitialized() => GameState.OnChange += StateHasChanged;
    public void Dispose() => GameState.OnChange -= StateHasChanged;

    private void Close() => ModalService.CloseModal();

    private int XPProgress =>
        GameState.Bakery.ExperienceToNextLevel == 0 ? 0 : Math.Min(100, (int)(100.0 * GameState.Bakery.Experience / GameState.Bakery.ExperienceToNextLevel));
    private int TotalProductsSold =>
        GameState.Bakery.Products.Sum(p => p.QuantitySold);

    private List<Product> SortedProductsBySold => GameState.Bakery.Products
        .Where(p => p.QuantitySold > 0)
        .OrderByDescending(p => p.QuantitySold)
        .ToList();
}
